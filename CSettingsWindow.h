// =================================================================================//	CSettingsWindow.h					// =================================================================================//	CSettingsWindow.cp	#pragma once#include <LWindow.h>#include <LListener.h>#include <LTabsControl.h>#include "CReducePrefs.h"#include "ReduceConstants.h"#include "CReduceApp.h"class CSettingsWindow : public PP::LWindow , public PP::LListener, public PP::LBroadcaster {public:	enum { class_ID = 'RDst' };							CSettingsWindow();							CSettingsWindow( PP::LStream *inStream );							~CSettingsWindow();	virtual Boolean			HandleKeyPress(const EventRecord &inKeyEvent);	void					SetUp(CReduceApp *inApp, CReducePrefs *inPrefsHolder, PrefStruct *inPrefs, myLFileStream *inSettingsFile = nil);protected:	virtual void			ListenToMessage(PP::MessageT inMessage, void *ioParam);	virtual void			FinishCreateSelf();	void					AddHelpBalloons();	void					UseNewPanel(PP::LView *inView);	protected:	void					StoreWindowValues(PrefStruct *outPrefs);	void					SetValues(PrefStruct *inPrefs);	CReducePrefs			*mPrefsHolder;	PrefStruct				*mPrefs;	PrefStruct				*IOPrefs;	CReduceApp				*mTheApp;	PP::LView					*mCurrentPanel;	PP::LTabsControl			*mTabPanel;	PP::LPlaceHolder			*mPanelHost;	PP::LView					*mCSDPanel;	PP::LView					*mStatsPanel;	PP::LView					*mEnvelopesPanel;	PP::LView					*mOutputPanel;	PP::LView					*mMiscPanel;	PP::LView					*mShavePanel;	PP::LPane					*mTheXYZPopup;	PP::LPane					*mMaxAR_ET;	PP::LPane					*mMaxAR_ST;};