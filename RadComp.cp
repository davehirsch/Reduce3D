#pragma once#include "RadComp.h"#include "fp.h"// ===========================================================================//	¥ RadComp// ===========================================================================//	Compares only x and y values of pixelInfo or storedPixelInfo structsRadComp*	RadComp::sRadComparator;RadComp::RadComp(){}RadComp::~RadComp(){}SInt32RadComp::Compare(	const void*		inItemOne,	const void*		inItemTwo,	UInt32			/* inSizeOne */,	UInt32			/* inSizeTwo */) const{	float numOne = *((float*)inItemOne);	float numTwo = *((float*)inItemTwo);	if (numOne < numTwo)		return -1;	else if (numTwo < numOne)		return 1;	else return 0;}BooleanRadComp::IsEqualTo(	const void*		inItemOne,	const void*		inItemTwo,	UInt32			/* inSizeOne */,	UInt32			/* inSizeTwo */) const{	return (Compare(inItemOne, inItemTwo, sizeof(inItemOne), sizeof(inItemTwo)) == 0);}RadComp*RadComp::GetComparator(){	if (sRadComparator == nil) {		sRadComparator = new RadComp;	}		return sRadComparator;}