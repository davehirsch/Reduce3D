//**************************************************************************************// Filename:	CrystalHashTable.h// Copyright © 1998 <YourNameHere>. All rights reserved.//// Description:	////**************************************************************************************// Revision History:// Monday, November 30, 1998 - Original//**************************************************************************************#pragma once#include "SideSet.h"#include "CrystalArray.h"#include "BoundingBox.h"#include "ReduceConstants.h"const short kArrayIncrement = 10;typedef short *	XlList;	// The structure of each XlList is as follows:	//	1st short	arraySize;	(number of allocated shorts in this array)	//	2nd short	engulfed;	(a boolean value indicating whether cell is completely inside a crystal)	//	3rd short	elementCount; (number of shorts used for crystal index numbers)	//	4-n short	crystalIndexNumber;	(the actual hash values)class CrystalHashTable{	public:	// Exception Classes		class MemErr {};	// Public Enums and Constants			// Public Functions		//Default Constructor							CrystalHashTable();							CrystalHashTable(BoundingBox *inBBox, short inDim);		//Destructor		virtual				~CrystalHashTable();				void				InitializeHash();		void				InitDimensions();		void				ReHash();/*		inline XlList		NearbyCrystals(Point3DFloat &inLoc) {								return mHash[(short) floor((inLoc.x - mXMin) / mXUnit) * mDim * mDim +											(short) floor((inLoc.y - mYMin) / mYUnit) * mDim +											(short) floor((inLoc.z - mZMin) / mZUnit)];};*/		Boolean				NearbyCrystals(Point3DFloat &inLoc, XlList &ioXls);		void				CleanUp();		void				Copy(CrystalHashTable &inHash);		void				AssignXlsRP();			protected:		// Member Variables and Classes		SideSet			*mSSet;		CrystalArray	*mXls;		XlList			*mHash;		short			mType;		float			mXUnit, mYUnit, mZUnit;		float			mHUnit, mRUnit, mThetaUnit;		float			mXMin, mYMin, mZMin;		float			mHMin, mXCtr, mYCtr;		short			mDim;			// Defensive programming. No copy constructor nor operator=							CrystalHashTable(const CrystalHashTable&);		CrystalHashTable&			operator=(const CrystalHashTable&);};