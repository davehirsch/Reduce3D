// =================================================================================//	CReduceApp.h	 					// =================================================================================#pragma once#define __Reducing#include <LApplication.h>#include "CBalloonApp.h"#include "myLFileStream.h"#include "HoleSet.h"#include "Stats.h"#include "MathStuff.h"#include "CFloatArray.h"#include "LString.h"#include "EnvelopeData.h"#include "LDebugMenuAttachment.h"pascal void __SLStart(void);class CSettingsWindow;class CReducePrefs;class BoundingBox;class SideSet;typedef struct DistArrayElem {	short	index;	float	dist;} DistArrayElem;class CReduceApp : public CBalloonApp {public:	class CancelErr{};	class QuadratFailed{};	class CalcError{};	class InitErr{};	class SimulationErr{};	class ReduceFailedErr{};							CReduceApp();	virtual 				~CReduceApp();	virtual Boolean			ObeyCommand( PP::CommandT inCommand, void *ioParam );	virtual void			FindCommandStatus( PP::CommandT inCommand,								Boolean &outEnabled, Boolean &outUsesMark,								UInt16 &outMark, Str255 outName );	PrefStruct				*GetPrefs() {return mPrefs;};	CReducePrefs			*GetPrefsHolder() {return mPrefsHolder;};	void					SetInputFileAndProcessData();	void					SetHolesFile(myLFileStream *);	void					ReduceData();	void					ShaveAndReduceData();	Boolean					HasQD3D();	BoundingBox 			*GetBBox();	inline	Boolean			IsBatch() {return mRunType==kBatch;};	inline HoleSet			*GetHoles(){return mHoles;};	float					OffsetIntersectVol(Point3DFloat inPt1, Point3DFloat inPt2);	Boolean					GoodCFVal(double inVal);	inline Stats			*GetStats() {return mStats;};	myLFileStream*			GetDebugFile() {return mDebugOutputFile;};	protected:	void					CalcStats();	float					FindSwissVolume();	Point3DFloat			&RandPtNearBox(Point3DFloat &inMinPoint,											Point3DFloat &inMaxPoint);	Boolean					InBoxNotHole(Point3DFloat &inPoint);	void					DoInitialStats();	void					ComputeVolumes();	double					CorrectedXlVol(short curIndex, Crystal currXl);	void					ComputeRadiusStats();	void					ComputeNeighbors();	void					ComputeCSDStats();	void					ComputeStats();	void					ComputeAvramiTest();	void					ComputeCFs_Both();	void					ComputeQuadrat();	void					ExtractEnvData(Stats *inStats, OneSet *ioEnv);	void					Get3DRandPt(Point3DFloat *outPt);	Point3DFloat			&Get3DRandQuad(float quadSize);	Point3DFloat			&Get3DRandSphere(float quadSize);	void					ComputeRandomPt();	void					DoMeanCumCSD();	void					DoMaxCumCSD();	void					DoLogCsd();	void					DoNNCSD();	void					DoRegCSD();	void					DoReduce3DFile();	void					DoRedStatsFile();	void					SaveCSD(CFloatArray &inCSD, short inCSDKind, float binSize=0);	PP::LStr255					MakeCSDFileName(Str63 inOldName, short inCSDKind);	void					WriteCSD(CFloatArray &inCSD, short inCSDKind, float binSize);	void					WriteRedStatsFile();	void					WriteReduceFile();	void					WritePrefsSettings();	void					WriteIntFile(short inEnvRun = -1, float inOldMeanR = -1.0, float inNewMeanR = -1.0);	short					FindInsertIndex(DistArrayElem *inArray, short inNumElems, float &inVal);	void					BeTarget();	float					GetPercentSphereInsideBoxNotHoles(Point3DFloat inCtr, float inRadius, short inNumSpherePts);	float					Epanecnikov(float h, float t);	float					FindIntensity();	float					FindIntensitySquared();	void					FindBestPrimitive();	void					NewFindBestRPPrimitive(SideSet &ioPrim);	void					AdaptToPrimitiveBox();	void					EvaluateCFStats(EnvelopeData &Envelopes, Boolean inDoSigmas, short inConfidence);	void					DoEnvelopes();	float					MakeGoodRandomSimulation(double *inRadiiList, float inVolFraction, Boolean inMatchingCTDataSet);	void					PutPrimInMiddle(SideSet &ioPrim, short tryNum = -1);	Boolean					ShaveData(BoundingBox *mStartBBox, BoundingBox *ioBBox);	void					MakeShuffleArray(short *inArray);	double					NearestSideHoleDist(Point3DFloat *inPt);protected:	virtual void			StartUp();	virtual void			Initialize();	// overriding the initialize function	virtual void			ShowAboutBox();	virtual void			HandleAppleEvent(								const AppleEvent	&inAppleEvent,								AppleEvent			&outAEReply,								AEDesc				&outResult,								long				inAENumber);	void					DoAEOpenDoc(								const AppleEvent	&inAppleEvent,								AppleEvent&			/* outAEReply */,								SInt32				inAENumber);	void					InitQD3D();	protected:	PP::LDebugMenuAttachment	*mDebugMenuAtt;	CSettingsWindow			*settingsWind;	PP::LWindow				*shaveWind;	CReducePrefs			*mPrefsHolder;	PrefStruct				*mPrefs;	myLFileStream			*mInputFile;	myLFileStream			*mSettingsFile;	myLFileStream			*mDebugOutputFile;	myLFileStream			*mHolesFile;	myLFileStream			*mCSDOutputFile;	BoundingBox				*mBBox;	BoundingBox				*mStartBBox;	HoleSet					*mHoles;	Boolean					mHasQD3D;	Stats					*mStats;	CrystalArray 			*mTheXls;	CrystalArray 			*mSimulation;	Boolean					mSimulating;	Boolean					mDoSigmas;	short					mRunType;	short					mShaveIteration;	LProgressDialog	 		*mProgress;	Boolean					mQD3DProblem;	PP::LArray					*mFilesToOpen;};