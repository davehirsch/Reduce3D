#include "SideComp.h"#include "Side.h"// ===========================================================================//	¥ SideComp// ===========================================================================//	Compares only radius values of Crystal structs - gives them back from largest//	to smallest!  This is so thatwe can place the largest crystals first in//	simulations.SideComp*	SideComp::sSideComparator;SideComp::SideComp(){}SideComp::~SideComp(){}BooleanSideComp::IsEqualTo(	const void*		inItemOne,	const void*		inItemTwo,	UInt32			/* inSizeOne */,	UInt32			/* inSizeTwo */) const{	Side *SideOne = (Side*)inItemOne;	Side *SideTwo = (Side*)inItemTwo;	if ((SideOne->pt1 == SideTwo->pt1 || SideOne->pt1 == SideTwo->pt2 || SideOne->pt1 == SideTwo->pt3) &&		(SideOne->pt2 == SideTwo->pt1 || SideOne->pt2 == SideTwo->pt2 || SideOne->pt2 == SideTwo->pt3) &&		(SideOne->pt3 == SideTwo->pt1 || SideOne->pt3 == SideTwo->pt2 || SideOne->pt3 == SideTwo->pt3))		return true;		return false;}SideComp*SideComp::GetComparator(){	if (sSideComparator == nil) {		sSideComparator = new SideComp;	}		return sSideComparator;}