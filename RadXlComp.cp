#include "RadXlComp.h"// ===========================================================================//	¥ RadXlComp// ===========================================================================//	Compares only radius values of Crystal structs - gives them back from largest//	to smallest!  This is so thatwe can place the largest crystals first in//	simulations.RadXlComp*	RadXlComp::sRadXlComparator;RadXlComp::RadXlComp(){}RadXlComp::~RadXlComp(){}SInt32RadXlComp::Compare(	const void*		inItemOne,	const void*		inItemTwo,	UInt32			/* inSizeOne */,	UInt32			/* inSizeTwo */) const{	float numOne = ((Crystal*)inItemOne)->r;	float numTwo = ((Crystal*)inItemTwo)->r;	if (numOne > numTwo)		return -1;	else if (numTwo > numOne)		return 1;	else return 0;}BooleanRadXlComp::IsEqualTo(	const void*		inItemOne,	const void*		inItemTwo,	UInt32			/* inSizeOne */,	UInt32			/* inSizeTwo */) const{	return (Compare(inItemOne, inItemTwo, sizeof(inItemOne), sizeof(inItemTwo)) == 0);}RadXlComp*RadXlComp::GetComparator(){	if (sRadXlComparator == nil) {		sRadXlComparator = new RadXlComp;	}		return sRadXlComparator;}