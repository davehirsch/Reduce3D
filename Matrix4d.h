// ===========================================================================//	Matrix4d.h// ===========================================================================#pragma once#include "Vector4d.h"#include "NumberedPt.h"// ---------------------------------------------------------------------------//		¥ Matrix4d// ---------------------------------------------------------------------------class	Matrix4d {	public:		class OutOfBoundsErr{};	// exception class						Matrix4d();						Matrix4d(Matrix4d &inMatrix4d);		virtual			~Matrix4d();		Vector4d		&operator[](short inSub);		Point3DFloat	operator* (Point3DFloat &inPt);		NumberedPt		operator* (NumberedPt &inPt);		Matrix4d		operator* (Matrix4d &inMat);		void			BeIdentity();		inline friend Point3DFloat						operator* (Point3DFloat &inPt, Matrix4d &inMat) {return inMat*inPt;};		inline friend NumberedPt						operator* (NumberedPt &inPt, Matrix4d &inMat) {return inMat*inPt;};		Matrix4d		RotationMatrix (Point3DFloat &pt1, Point3DFloat &pt2,									 Point3DFloat &pt3);		Matrix4d		TransformationMatrix (Point3DFloat &pt1, Point3DFloat &pt2,									 Point3DFloat &pt3);		Matrix4d		TranslationMatrix (float dx, float dy, float dz);	public:		Vector4d		theArray[5];	// 5 vectors so we don't have to worry about starting										// with zero instead of one; same thing is done in										// Vector4d class. (ignore element zero)};