// CReducePrefs.cp 1.0#include "CReducePrefs.h"#include "ReduceConstants.h"//----------------------------------// CReducePrefs constructor//	This will create a preference file named 'inName' with//	a creator of 'inCreator' in the Preferences folder, if there isn't one there already.//----------------------------------CReducePrefs::CReducePrefs()	: CPreference("\pReduce 3D Prefs"){	mPrefsPtr = new PrefStruct();	InitPreferences();}//----------------------------------// CReducePrefs default destructor//	delete file object and any other handles.//----------------------------------CReducePrefs::~CReducePrefs(void){	if (mPrefsPtr != nil)		delete mPrefsPtr;	mPrefsPtr = nil;}//----------------------------------// MakeDefaultPreferenceResource//	To be used once to make the resource that get put into the app,//  which CreateInitialPrefFile will read//----------------------------------PrefStruct *CReducePrefs::NewPrefStructWithDefaultValues(){	PrefStruct *outPref = new PrefStruct;	outPref->includeMeanCSD = false;	outPref->includeMaxCSD = false;	outPref->includeLogCSD = false;	outPref->includeRegCSD = false;	outPref->doQuadrat = true;	outPref->doOthers = true;	outPref->doRandomPt = true;	outPref->make3DModel = false;	outPref->outputSigmas = false;	outPref->outputCrystals = false;	outPref->outputR3STT = false;	outPref->outputReduce = true;	outPref->doImpingement = true;	outPref->numClassesMeanCSD = 63;	outPref->numClassesMaxCSD = 63;	outPref->numClassesLogCSD = 63;	outPref->quadratNumPlacings = 1000;	outPref->quadratNumReps = 10;	outPref->RPNumPlacings = 1000;	outPref->RPNumReps = 10;	outPref->maxValueMeanCSD = 3.00;	outPref->deltaLRegCSD = 0.10;	outPref->impingementMeanErr = 0.10;	outPref->impingementMaxErr = 20.00;	outPref->doLMcfPcf = true;	outPref->numNNDist = 6;	outPref->numCFOffsetVolPts = 500;	outPref->EpanecnikovCVal = 0.1;	outPref->numQD3DEqPts = 5;	outPref->numQD3DLngPts = 5;	outPref->sampleShape = kRectPrism;	outPref->numEnvelopeRuns = 100;	outPref->greediness = 9;	outPref->inflateBBox = false;	outPref->observabilityFilter = true;	outPref->crit1Factor = 0.85;	outPref->crit2Factor = 3.0;	outPref->doShave = false;	outPref->keepAspectRatios = true;	outPref->shaveXYZ = 1;	outPref->shaveIncrement = 10.0;	outPref->direction = 2;	outPref->minPercent = 10.0;	outPref->minPopulation = 200;	outPref->maxAspectRatio = 1000.0;	outPref->smaller = false;	outPref->ShaveSave = false;	outPref->discardNegs = true;	outPref->useRaeburn = false;	outPref->confidence = 96;	outPref->seed = 1234567;	outPref->MCReps = 5000;	outPref->tidyUp = true;	outPref->useVolume = false;	outPref->overlap = 50;	outPref->matchVF = true;	outPref->makeDCEnv = false;	outPref->verbose = false;	outPref->VFPercent = 10.0;	outPref->matchPDF = false;	outPref->discard = 0.0;	outPref->fixClaude = false;	return outPref;}//----------------------------------// WritePrefsToStream//----------------------------------void CReducePrefs::WritePrefsToStream(PP::LStream& inStream, PrefStruct *inPrefs){	inStream << inPrefs->includeMeanCSD;	inStream << inPrefs->includeMaxCSD;	inStream << inPrefs->includeLogCSD;	inStream << inPrefs->includeRegCSD;	inStream << inPrefs->doQuadrat;	inStream << inPrefs->doOthers;	inStream << inPrefs->doRandomPt;	inStream << inPrefs->make3DModel;	inStream << inPrefs->outputSigmas;	inStream << inPrefs->outputCrystals;	inStream << inPrefs->outputR3STT;	inStream << inPrefs->outputReduce;	inStream << inPrefs->doImpingement;	inStream << inPrefs->numClassesMeanCSD;	inStream << inPrefs->numClassesMaxCSD;	inStream << inPrefs->numClassesLogCSD;	inStream << inPrefs->quadratNumPlacings;	inStream << inPrefs->quadratNumReps;	inStream << inPrefs->RPNumPlacings;	inStream << inPrefs->RPNumReps;	inStream << inPrefs->maxValueMeanCSD;	inStream << inPrefs->deltaLRegCSD;	inStream << inPrefs->impingementMeanErr;	inStream << inPrefs->impingementMaxErr;	inStream << inPrefs->doLMcfPcf;	inStream << inPrefs->numNNDist;	inStream << inPrefs->numCFOffsetVolPts;	inStream << inPrefs->EpanecnikovCVal;	inStream << inPrefs->numQD3DEqPts;	inStream << inPrefs->numQD3DLngPts;	inStream << inPrefs->sampleShape;	inStream << inPrefs->numEnvelopeRuns;	inStream << inPrefs->greediness;	inStream << inPrefs->inflateBBox;	inStream << inPrefs->observabilityFilter;	inStream << inPrefs->crit1Factor;	inStream << inPrefs->crit2Factor;	inStream << inPrefs->doShave;	inStream << inPrefs->keepAspectRatios;	inStream << inPrefs->shaveXYZ;	inStream << inPrefs->shaveIncrement;	inStream << inPrefs->direction;	inStream << inPrefs->minPercent;	inStream << inPrefs->minPopulation;	inStream << inPrefs->maxAspectRatio;	inStream << inPrefs->smaller;	inStream << inPrefs->ShaveSave;	inStream << inPrefs->discardNegs;	inStream << inPrefs->useRaeburn;	inStream << inPrefs->confidence;	inStream << inPrefs->seed;	inStream << inPrefs->MCReps;	inStream << inPrefs->tidyUp;	inStream << inPrefs->useVolume;	inStream << inPrefs->overlap;	inStream << inPrefs->matchVF;	inStream << inPrefs->makeDCEnv;	inStream << inPrefs->verbose;	inStream << inPrefs->VFPercent;	inStream << inPrefs->matchPDF;	inStream << inPrefs->discard;	inStream << inPrefs->fixClaude;}//----------------------------------// ReadPrefsFromStream//----------------------------------void CReducePrefs::ReadPrefsFromStream(PP::LStream& inStream, PrefStruct *inPrefs){	inStream >> inPrefs->includeMeanCSD;	inStream >> inPrefs->includeMaxCSD;	inStream >> inPrefs->includeLogCSD;	inStream >> inPrefs->includeRegCSD;	inStream >> inPrefs->doQuadrat;	inStream >> inPrefs->doOthers;	inStream >> inPrefs->doRandomPt;	inStream >> inPrefs->make3DModel;	inStream >> inPrefs->outputSigmas;	inStream >> inPrefs->outputCrystals;	inStream >> inPrefs->outputR3STT;	inStream >> inPrefs->outputReduce;	inStream >> inPrefs->doImpingement;	inStream >> inPrefs->numClassesMeanCSD;	inStream >> inPrefs->numClassesMaxCSD;	inStream >> inPrefs->numClassesLogCSD;	inStream >> inPrefs->quadratNumPlacings;	inStream >> inPrefs->quadratNumReps;	inStream >> inPrefs->RPNumPlacings;	inStream >> inPrefs->RPNumReps;	inStream >> inPrefs->maxValueMeanCSD;	inStream >> inPrefs->deltaLRegCSD;	inStream >> inPrefs->impingementMeanErr;	inStream >> inPrefs->impingementMaxErr;	inStream >> inPrefs->doLMcfPcf;	inStream >> inPrefs->numNNDist;	inStream >> inPrefs->numCFOffsetVolPts;	inStream >> inPrefs->EpanecnikovCVal;	inStream >> inPrefs->numQD3DEqPts;	inStream >> inPrefs->numQD3DLngPts;	inStream >> inPrefs->sampleShape;	inStream >> inPrefs->numEnvelopeRuns;	inStream >> inPrefs->greediness;	inStream >> inPrefs->inflateBBox;	inStream >> inPrefs->observabilityFilter;	inStream >> inPrefs->crit1Factor;	inStream >> inPrefs->crit2Factor;	inStream >> inPrefs->doShave;	inStream >> inPrefs->keepAspectRatios;	inStream >> inPrefs->shaveXYZ;	inStream >> inPrefs->shaveIncrement;	inStream >> inPrefs->direction;	inStream >> inPrefs->minPercent;	inStream >> inPrefs->minPopulation;	inStream >> inPrefs->maxAspectRatio;	inStream >> inPrefs->smaller;	inStream >> inPrefs->ShaveSave;	inStream >> inPrefs->discardNegs;	inStream >> inPrefs->useRaeburn;	inStream >> inPrefs->confidence;	inStream >> inPrefs->seed;	inStream >> inPrefs->MCReps;	inStream >> inPrefs->tidyUp;	inStream >> inPrefs->useVolume;	inStream >> inPrefs->overlap;	inStream >> inPrefs->matchVF;	inStream >> inPrefs->makeDCEnv;	inStream >> inPrefs->verbose;	inStream >> inPrefs->VFPercent;	inStream >> inPrefs->matchPDF;	inStream >> inPrefs->discard;	inStream >> inPrefs->fixClaude;}