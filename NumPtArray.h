// =================================================================================//	NumberedPtComp.h 					// =================================================================================#pragma once#include <LComparator.h>class	NumberedPtComp : public LComparator {public:						NumberedPtComp();	virtual				~NumberedPtComp();				virtual SInt32		Compare(								const void*			inItemOne,								const void* 		inItemTwo,								UInt32				inSizeOne,								UInt32				inSizeTwo) const;									virtual Boolean		IsEqualTo(								const void*			inItemOne,								const void* 		inItemTwo,								UInt32				inSizeOne,								UInt32				inSizeTwo) const;								};// =================================================================================//	NumPtArray.h 					// =================================================================================#include <LArray.h>#include "NumberedPt.h"#include "CrystalArray.h"class NumPtArray: public LArray {	public:	// Exception Classes		class ArrayIOErr {};		public:							NumPtArray(								LComparator		*inComparator = nil,								Boolean			inKeepSorted = false);							NumPtArray(CrystalArray *inXls);							~NumPtArray();		NumberedPt		&operator[](short inSub);		Boolean			PointInArray(NumberedPt &inPt);		NumberedPt		PopPt();		void				PushPt(NumberedPt &inXl);		void				Clear();			protected:		NumberedPtComp *theNumberedPtComp;};