// ===========================================================================
//	CFloatArray.cp
//		A 1-based array of floats using the C++ STL for storage.  Used for legacy
//		(CW PowerPlant) compatibility
// ===========================================================================
//	
#import	"CFloatArray.h"

// ---------------------------------------------------------------------------
//		¥ CFloatArray
// ---------------------------------------------------------------------------
//	Constructor for an empty CFloatArray
CFloatArray::CFloatArray()
{
	// reserve space for the array
	array.reserve(1000);
}

// ---------------------------------------------------------------------------
//		¥ ~CFloatArray
// ---------------------------------------------------------------------------
//	Destructor for CFloatArray
CFloatArray::~CFloatArray()
{
}

// ---------------------------------------------------------------------------------
//		¥ Pop
// ---------------------------------------------------------------------------------
float
CFloatArray::Pop()
{
	static float outNum;
	
	if (array.size() > 0) {
		outNum = array.back();
		array.pop_back();
	} else {		
		throw ArrayIOErr();
	}
	
	return outNum;
}

// ---------------------------------------------------------------------------------
//		¥ Push
// ---------------------------------------------------------------------------------
void
CFloatArray::Push(float *inNum)
{
	array.push_back(*inNum);
}

// ---------------------------------------------------------------------------------
//		¥ Push
// ---------------------------------------------------------------------------------
void
CFloatArray::Push(float inNum)
{
	array.push_back(inNum);
}

// ---------------------------------------------------------------------------------
//		¥ Clear
// ---------------------------------------------------------------------------------
void
CFloatArray::Clear()
{
	array.clear();
}

// ---------------------------------------------------------------------------
//		¥ operator[]
// ---------------------------------------------------------------------------
float
CFloatArray::operator[](int inSub)
{
	return array.at(inSub);
}

// ---------------------------------------------------------------------------
//		¥ Update
// ---------------------------------------------------------------------------
void
CFloatArray::Update(int index, float inNum)
{
	if (index > 0 && index < array.size()){
		array.at(index) = inNum;
	}
}

