// ===========================================================================//	SideSet.h// ===========================================================================#pragma once#include <LArray.h>#include "Side.h"#include "ReduceConstants.h"#include "CrystalArray.h"#include "MathStuff.h"// ---------------------------------------------------------------------------//		¥ SideSet// ---------------------------------------------------------------------------class	SideSet : public LArray {//	friend class CrystalHashTable;	public:		class		ArrayIOErr{};							SideSet(								LComparator		*inComparator = nil,								Boolean			inKeepSorted = false);							SideSet(SideSet &inSideSet);							~SideSet();		void				Copy(SideSet &inSideSet);		Side				PopSide();		void				PushSide(Side &inSide);		void				Clear();		Side				&operator[](short inSub);		void				UpdateSide(short index, Side &inSide);		Boolean				RawPointInBox(Point3DFloat &inPt);		void				SetThreshold(double inNum) {mDiscardThreshold = inNum;};		inline void			SetType(short inType) {mType = inType;};		inline void			SetCtr(Point3DFloat inPt) {mCtr = inPt;};		inline void			SetSideLen(float inLen) {mSideLen = inLen;};		float				Volume();		inline float		GetSideLen() {return mSideLen;};		Point3DFloat		&GetSideLenPt();		inline Point3DFloat &							GetCtr() {return mCtr;};		Boolean				AllPointsInBox(CrystalArray *theXls);		float				ToroidalDistance(Point3DFloat &inPt1, Point3DFloat &inPt2);		inline void			SetOffset(Point3DFloat &inPt) {mOffset = inPt;};		inline Point3DFloat	GetOffset() {return mOffset;};		Point3DFloat		&RandPtInPrimitive();		void				RandPtInPrimitive(Point3DFloat &ioPt);		Point3DFloat		&RandPtInPrimitive(nuclProbType	*nuclProb);		double				Calc1Probability(nuclProb1D &nuclProb, float inLoc);		short				NumPointsInBox(CrystalArray *theXls);		void				SetDimensions(float inXLen, float inYLen, float inZLen);		void				SetDimensions(float inRadius, float inHeight);		void				SetDimensions(Point3DFloat inPt);		inline short		GetType(){return mType;};		inline float		GetRadius(){return mRadius;};		inline float		GetHeight(){return mHeight;};		inline float		GetXLen(){return mSideLenX;};		inline float		GetYLen(){return mSideLenY;};		inline float		GetZLen(){return mSideLenZ;};		void				AlignSide(Side &ioSide);		Boolean				PointOnBox(Point3DFloat &inPt);		void				MakeAllInVects();		float				AspectRatio();	protected:		float		TetrahedronVolume (Point3DFloat &pt1, Point3DFloat &pt2,								Point3DFloat &pt3, Point3DFloat &pt4);	protected:		double		mDiscardThreshold;		short			mType;		NumberedPt		mCtr;		float			mSideLen, mSideLenX, mSideLenY, mSideLenZ, mHeight, mRadius;		Point3DFloat	mOffset;};